<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>La scienza ha un cuore antico</title>
    <link>http://localhost:1313/</link>
    <description>Recent content on La scienza ha un cuore antico</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>it</language>
    <managingEditor>barbierid@msis002003.onmicrosoft.com (barbierid)</managingEditor>
    <webMaster>barbierid@msis002003.onmicrosoft.com (barbierid)</webMaster>
    <lastBuildDate>Tue, 09 Jan 2024 15:55:42 +0100</lastBuildDate><atom:link href="http://localhost:1313/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Appunti di Fisica</title>
      <link>http://localhost:1313/pages/pyphysics/pyphysics/</link>
      <pubDate>Tue, 09 Jan 2024 15:55:42 +0100</pubDate>
      <author>barbierid@msis002003.onmicrosoft.com (barbierid)</author>
      <guid>http://localhost:1313/pages/pyphysics/pyphysics/</guid>
      
      <description>&lt;p&gt;Qui potrete trovare una selezione accurata di risorse didattiche per approfondire i vari aspetti della fisica.&lt;/p&gt;
&lt;h2&gt;Vettori&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://localhost:1313/pages/pyphysics/intro_vec/&#34; title=&#34;Introduzione ai  vettori&#34;&gt;Introduzione ai vettori&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://localhost:1313/pages/pyphysics/gen_vec_sum/&#34; title=&#34;Somma di vettori&#34;&gt;Somma di vettori&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://localhost:1313/pages/pyphysics/gen_vec_sub/&#34; title=&#34;Differenza di vettori&#34;&gt;Differenza di vettori&lt;/a&gt;&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>Appunti di Matematica</title>
      <link>http://localhost:1313/pages/pymath/pymath/</link>
      <pubDate>Tue, 09 Jan 2024 15:55:42 +0100</pubDate>
      <author>barbierid@msis002003.onmicrosoft.com (barbierid)</author>
      <guid>http://localhost:1313/pages/pymath/pymath/</guid>
      
      <description>&lt;p&gt;Work in progress&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>Differenza di vettori</title>
      <link>http://localhost:1313/pages/pyphysics/gen_vec_sub/</link>
      <pubDate>Tue, 09 Jan 2024 15:55:42 +0100</pubDate>
      <author>barbierid@msis002003.onmicrosoft.com (barbierid)</author>
      <guid>http://localhost:1313/pages/pyphysics/gen_vec_sub/</guid>
      
      <description>&lt;p&gt;$$\vec d = \vec v_1 - \vec v_2$$&lt;/p&gt;
&lt;p&gt;


    &lt;!DOCTYPE html&gt;
&lt;html lang=&#34;en&#34;&gt;
&lt;head&gt;
    &lt;meta charset=&#34;UTF-8&#34;&gt;
    &lt;meta name=&#34;viewport&#34; content=&#34;width=device-width, initial-scale=1.0&#34;&gt;
    &lt;title&gt;Random Vectors Plot&lt;/title&gt;
    &lt;style&gt;
        canvas {
            border: 1px solid #000;
            padding-left: 0;
            padding-right: 0;
            margin-left: auto;
            margin-right: auto;
            display: block;
        }
    &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;canvas id=&#34;plotCanvas&#34; width=&#34;400&#34; height=&#34;400&#34;&gt;&lt;/canvas&gt;

    &lt;script&gt;
        // Function to generate a random vector with modulus 1 starting from the origin
        function generateUnitVector() {
            return {
                x: Math.round(Math.random()*20 - 10)/10,
                y: Math.round(Math.random()*20 - 10)/10
            };
        }

        // Function to add two vectors
        function addVectors(vector1, vector2) {
            return {
                x: Math.round((vector1.x + vector2.x)*1000)/1000,
                y: Math.round((vector1.y + vector2.y)*1000)/1000
            };
        }

        function subtractVectors(vector1, vector2) {
            return {
                x: Math.round((vector1.x - vector2.x)*1000)/1000,
                y: Math.round((vector1.y - vector2.y)*1000)/1000
            };
        }

        // Function to plot a vector as an arrow on the canvas
        function plotVector(context, vector, color, name) {
            context.strokeStyle = color;
            context.fillStyle = color;

            // Arrow properties
            const arrowLength = 100;
            const arrowWidth = 15;
            const textSpacing = 1.2;
            const arrowThickness = 0.85;

            // Calculate arrowhead points
            const arrowHead1 = {
                x: arrowLength * vector.x * arrowThickness - arrowWidth * vector.y * arrowThickness,
                y: arrowLength * vector.y * arrowThickness + arrowWidth * vector.x * arrowThickness
            };

            const arrowHead2 = {
                x: arrowLength * vector.x * arrowThickness + arrowWidth * vector.y * arrowThickness,
                y: arrowLength * vector.y * arrowThickness - arrowWidth * vector.x * arrowThickness
            };

            // Draw arrow line
            context.beginPath();
            context.moveTo(canvas.width / 2, canvas.height / 2);
            context.lineTo(canvas.width / 2 + arrowLength * vector.x, canvas.height / 2 + arrowLength * vector.y);
            context.lineWidth = 2;

            context.stroke();

            // Draw arrowhead
            context.beginPath();
            context.moveTo(canvas.width / 2 + arrowLength * vector.x, canvas.height / 2 + arrowLength * vector.y);
            context.lineTo(canvas.width / 2 + arrowHead1.x, canvas.height / 2 + arrowHead1.y);
            context.moveTo(canvas.width / 2 + arrowLength * vector.x, canvas.height / 2 + arrowLength * vector.y);
            context.lineTo(canvas.width / 2 + arrowHead2.x, canvas.height / 2 + arrowHead2.y);
            context.lineWidth = 2;
            context.stroke();

            context.fillText(name, canvas.width / 2 + arrowHead2.x * textSpacing, canvas.height / 2 + arrowHead2.y * textSpacing); 
        }

        // Function to draw x and y axes
        function drawAxes(context, canvasWidth, canvasHeight) {
            // Draw x-axis
            context.beginPath();
            context.moveTo(0, canvasHeight / 2);
            context.lineTo(canvasWidth, canvasHeight / 2);
            context.stroke();

            // Draw y-axis
            context.beginPath();
            context.moveTo(canvasWidth / 2, 0);
            context.lineTo(canvasWidth / 2, canvasHeight);
            context.stroke();


            // Draw horizontal grid lines
            for (let y = 0; y &lt; canvasHeight; y += 10) {
                context.beginPath();
                context.moveTo(0, y);
                context.lineTo(canvasWidth, y);
                context.lineWidth = 0.1;
                context.stroke();
            }

            // Draw vertical grid lines
            for (let x = 0; x &lt; canvasWidth; x += 10) {
                context.beginPath();
                context.moveTo(x, 0);
                context.lineTo(x, canvasHeight);
                context.lineWidth = 0.1;
                context.stroke();
            }
        }

        // Get the canvas and its 2d rendering context
        var canvas = document.getElementById(&#39;plotCanvas&#39;);
        var context = canvas.getContext(&#39;2d&#39;);

        // Draw x and y axes
        drawAxes(context, canvas.width, canvas.height, );

        // Generate two random vectors as arrows with modulus 1 starting from the center
        var vector1 = generateUnitVector();
        var vector2 = generateUnitVector();

        // Calculate the sum and sub vector
        var subVector12 = subtractVectors(vector1, vector2);
        var subVector21 = subtractVectors(vector2, vector1);

        // Plot the vectors
        plotVector(context, vector1, &#39;red&#39;, &#34;v1&#34;);
        plotVector(context, vector2, &#39;blue&#39;, &#34;v2&#34;);
        plotVector(context, subVector12, &#39;purple&#39;, &#34;d&#34;);

        context.font = &#34;12px Arial&#34;;
        context.fillStyle = &#34;red&#34;;
        context.fillText(&#34;v1 = &#34; + vector1.x*10 + &#34; i &#34; + -vector1.y*10 + &#34; j&#34;, 10, 30); 
        
        context.fillStyle = &#34;blue&#34;;
        context.fillText(&#34;v2 = &#34; + vector2.x*10 + &#34; i &#34; + -vector2.y*10 + &#34; j&#34;, 10, 50); 
        
        context.fillStyle = &#34;purple&#34;;
        context.fillText(&#34;s = &#34; + subVector21.x*10 + &#34; i &#34; + -subVector21.y*10 + &#34; j&#34;, 10, 390); 
    &lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;



&lt;/p&gt;
&lt;p&gt;Il grafico in sovraimpressione mostra un piano cartesiano con frecce colorate che rappresentano vettori bidimensionali.
I vettori rossi e blu, rispettivamente $\vec v_1$ e $\vec v_2$, sono delimitati agli estremi dall&amp;rsquo;origine e dai punti $V_1$ e $V_2$.&lt;/p&gt;
&lt;p&gt;$$\vec v_1 = \vec{OV_1}$$
$$\vec v_2 = \vec{OV_2}$$&lt;/p&gt;
&lt;p&gt;Ogni vettore è infatti rappresentato da un modulo (lunghezza), una direzione (la retta su cui poggia) ed un verso.&lt;/p&gt;
&lt;p&gt;È inoltre presente una terza freccia, vettore, di colore viola. Questo vettore $\vec d$ è dato dalla differenza dei due precedenti vettori, ovvero:&lt;/p&gt;
&lt;p&gt;$$\vec d = \vec v_1 - \vec v_2$$&lt;/p&gt;
&lt;p&gt;Si può notare come il vettore $\vec d$ sia delimitato dal&amp;rsquo;origine e il punto $D$ identificato dalla differenza delle coordinate di $V_1$ e $V_2$.&lt;/p&gt;
&lt;p&gt;$$\vec d = \vec {OD}$$&lt;/p&gt;
&lt;p&gt;Esercitati, ricaricando la pagina, a calcolare le somme tra vari vettori.&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>Introduzione ai vettori</title>
      <link>http://localhost:1313/pages/pyphysics/intro_vec/</link>
      <pubDate>Tue, 09 Jan 2024 15:55:42 +0100</pubDate>
      <author>barbierid@msis002003.onmicrosoft.com (barbierid)</author>
      <guid>http://localhost:1313/pages/pyphysics/intro_vec/</guid>
      
      <description>&lt;p&gt;
&lt;!-- 

	&lt;!DOCTYPE html&gt;
&lt;html lang=&#34;en&#34;&gt;
&lt;head&gt;
    &lt;meta charset=&#34;UTF-8&#34;&gt;
    &lt;meta name=&#34;viewport&#34; content=&#34;width=device-width, initial-scale=1.0&#34;&gt;
    &lt;title&gt;Random Vectors Plot&lt;/title&gt;
    &lt;style&gt;
        canvas {
            border: 1px solid #000;
            padding-left: 0;
            padding-right: 0;
            margin-left: auto;
            margin-right: auto;
            display: block;
        }
    &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;canvas id=&#34;plotCanvas&#34; width=&#34;400&#34; height=&#34;400&#34;&gt;&lt;/canvas&gt;

    &lt;script&gt;
        // Function to generate a random vector with modulus 1 starting from the origin
        function generateUnitVector() {
            return {
                x: Math.round(Math.random()*20 - 10)/10,
                y: Math.round(Math.random()*20 - 10)/10
            };
        }

        // Function to add two vectors
        function addVectors(vector1, vector2) {
            return {
                x: Math.round((vector1.x + vector2.x)*1000)/1000,
                y: Math.round((vector1.y + vector2.y)*1000)/1000
            };
        }

        function subtractVectors(vector1, vector2) {
            return {
                x: Math.round((vector1.x - vector2.x)*1000)/1000,
                y: Math.round((vector1.y - vector2.y)*1000)/1000
            };
        }

        // Function to plot a vector as an arrow on the canvas
        function plotVector(context, vector, color, name) {
            context.strokeStyle = color;
            context.fillStyle = color;

            // Arrow properties
            const arrowLength = 100;
            const arrowWidth = 15;
            const textSpacing = 1.2;
            const arrowThickness = 0.85;

            // Calculate arrowhead points
            const arrowHead1 = {
                x: arrowLength * vector.x * arrowThickness - arrowWidth * vector.y * arrowThickness,
                y: arrowLength * vector.y * arrowThickness + arrowWidth * vector.x * arrowThickness
            };

            const arrowHead2 = {
                x: arrowLength * vector.x * arrowThickness + arrowWidth * vector.y * arrowThickness,
                y: arrowLength * vector.y * arrowThickness - arrowWidth * vector.x * arrowThickness
            };

            // Draw arrow line
            context.beginPath();
            context.moveTo(canvas.width / 2, canvas.height / 2);
            context.lineTo(canvas.width / 2 + arrowLength * vector.x, canvas.height / 2 + arrowLength * vector.y);
            context.lineWidth = 2;

            context.stroke();

            // Draw arrowhead
            context.beginPath();
            context.moveTo(canvas.width / 2 + arrowLength * vector.x, canvas.height / 2 + arrowLength * vector.y);
            context.lineTo(canvas.width / 2 + arrowHead1.x, canvas.height / 2 + arrowHead1.y);
            context.moveTo(canvas.width / 2 + arrowLength * vector.x, canvas.height / 2 + arrowLength * vector.y);
            context.lineTo(canvas.width / 2 + arrowHead2.x, canvas.height / 2 + arrowHead2.y);
            context.lineWidth = 2;
            context.stroke();

            context.fillText(name, canvas.width / 2 + arrowHead2.x * textSpacing, canvas.height / 2 + arrowHead2.y * textSpacing); 
        }

        // Function to draw x and y axes
        function drawAxes(context, canvasWidth, canvasHeight) {
            // Draw x-axis
            context.beginPath();
            context.moveTo(0, canvasHeight / 2);
            context.lineTo(canvasWidth, canvasHeight / 2);
            context.stroke();

            // Draw y-axis
            context.beginPath();
            context.moveTo(canvasWidth / 2, 0);
            context.lineTo(canvasWidth / 2, canvasHeight);
            context.stroke();


            // Draw horizontal grid lines
            for (let y = 0; y &lt; canvasHeight; y += 10) {
                context.beginPath();
                context.moveTo(0, y);
                context.lineTo(canvasWidth, y);
                context.lineWidth = 0.1;
                context.stroke();
            }

            // Draw vertical grid lines
            for (let x = 0; x &lt; canvasWidth; x += 10) {
                context.beginPath();
                context.moveTo(x, 0);
                context.lineTo(x, canvasHeight);
                context.lineWidth = 0.1;
                context.stroke();
            }
        }

        // Get the canvas and its 2d rendering context
        var canvas = document.getElementById(&#39;plotCanvas&#39;);
        var context = canvas.getContext(&#39;2d&#39;);

        // Draw x and y axes
        drawAxes(context, canvas.width, canvas.height, );

        // Generate two random vectors as arrows with modulus 1 starting from the center
        var vector1 = generateUnitVector();
        var vector2 = generateUnitVector();

        // Calculate the sum and sub vector
        var sumVector = addVectors(vector1, vector2);

        // Plot the vectors
        plotVector(context, vector1, &#39;red&#39;, &#34;v1&#34;);
        plotVector(context, vector2, &#39;blue&#39;, &#34;v2&#34;);
        plotVector(context, sumVector, &#39;green&#39;, &#34;w&#34;);

        context.font = &#34;12px Arial&#34;;
        context.fillStyle = &#34;red&#34;;
        context.fillText(&#34;v1 = &#34; + vector1.x*10 + &#34; i &#34; + -vector1.y*10 + &#34; j&#34;, 10, 30); 
        
        context.fillStyle = &#34;blue&#34;;
        context.fillText(&#34;v2 = &#34; + vector2.x*10 + &#34; i &#34; + -vector2.y*10 + &#34; j&#34;, 10, 50); 
        
        context.fillStyle = &#34;green&#34;;
        context.fillText(&#34;w = &#34; + sumVector.x*10 + &#34; i &#34; + -sumVector.y*10 + &#34; j&#34;, 10, 390); 
    &lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;


 --&gt;
&lt;/p&gt;
&lt;p&gt;I vettori rappresentano uno degli strumenti matematici fondamentali, vengono infatti utilizzati per descrivere spostamenti, forze e altre grandezze fisiche dove &lt;em&gt;un numero&lt;/em&gt; non è sufficiente.&lt;/p&gt;
&lt;p&gt;In matematica e fisica, un &lt;em&gt;vettore&lt;/em&gt; è un concetto che rappresenta una quantità caratterizzata non solo dalla sua &lt;em&gt;magnitudine&lt;/em&gt; (o grandezza), ma anche dalla sua &lt;em&gt;direzione&lt;/em&gt; e &lt;em&gt;verso&lt;/em&gt;. In altre parole, un vettore è un oggetto matematico che ha un &lt;strong&gt;modulo&lt;/strong&gt; (o lunghezza), una &lt;strong&gt;direzione&lt;/strong&gt; e un &lt;strong&gt;verso&lt;/strong&gt; specifici.&lt;/p&gt;
&lt;p&gt;Esploreremo le operazioni fondamentali come la somma e la moltiplicazione per uno scalare, apprendendo come applicare tali concetti sia in ambito geometrico che algebrico. Attraverso l&amp;rsquo;analisi dei vettori, svilupperemo una nuova prospettiva matematica che ci accompagnerà nella risoluzione di problemi complessi e nella comprensione più approfondita della natura delle grandezze fisiche che ci circondano.&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>Somma di vettori</title>
      <link>http://localhost:1313/pages/pyphysics/gen_vec_sum/</link>
      <pubDate>Tue, 09 Jan 2024 15:55:42 +0100</pubDate>
      <author>barbierid@msis002003.onmicrosoft.com (barbierid)</author>
      <guid>http://localhost:1313/pages/pyphysics/gen_vec_sum/</guid>
      
      <description>&lt;p&gt;$$\vec s = \vec v_1 + \vec v_2$$&lt;/p&gt;
&lt;p&gt;


	&lt;!DOCTYPE html&gt;
&lt;html lang=&#34;en&#34;&gt;
&lt;head&gt;
    &lt;meta charset=&#34;UTF-8&#34;&gt;
    &lt;meta name=&#34;viewport&#34; content=&#34;width=device-width, initial-scale=1.0&#34;&gt;
    &lt;title&gt;Random Vectors Plot&lt;/title&gt;
    &lt;style&gt;
        canvas {
            border: 1px solid #000;
            padding-left: 0;
            padding-right: 0;
            margin-left: auto;
            margin-right: auto;
            display: block;
        }
    &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;canvas id=&#34;plotCanvas&#34; width=&#34;400&#34; height=&#34;400&#34;&gt;&lt;/canvas&gt;

    &lt;script&gt;
        // Function to generate a random vector with modulus 1 starting from the origin
        function generateUnitVector() {
            return {
                x: Math.round(Math.random()*20 - 10)/10,
                y: Math.round(Math.random()*20 - 10)/10
            };
        }

        // Function to add two vectors
        function addVectors(vector1, vector2) {
            return {
                x: Math.round((vector1.x + vector2.x)*1000)/1000,
                y: Math.round((vector1.y + vector2.y)*1000)/1000
            };
        }

        function subtractVectors(vector1, vector2) {
            return {
                x: Math.round((vector1.x - vector2.x)*1000)/1000,
                y: Math.round((vector1.y - vector2.y)*1000)/1000
            };
        }

        // Function to plot a vector as an arrow on the canvas
        function plotVector(context, vector, color, name) {
            context.strokeStyle = color;
            context.fillStyle = color;

            // Arrow properties
            const arrowLength = 100;
            const arrowWidth = 15;
            const textSpacing = 1.2;
            const arrowThickness = 0.85;

            // Calculate arrowhead points
            const arrowHead1 = {
                x: arrowLength * vector.x * arrowThickness - arrowWidth * vector.y * arrowThickness,
                y: arrowLength * vector.y * arrowThickness + arrowWidth * vector.x * arrowThickness
            };

            const arrowHead2 = {
                x: arrowLength * vector.x * arrowThickness + arrowWidth * vector.y * arrowThickness,
                y: arrowLength * vector.y * arrowThickness - arrowWidth * vector.x * arrowThickness
            };

            // Draw arrow line
            context.beginPath();
            context.moveTo(canvas.width / 2, canvas.height / 2);
            context.lineTo(canvas.width / 2 + arrowLength * vector.x, canvas.height / 2 + arrowLength * vector.y);
            context.lineWidth = 2;

            context.stroke();

            // Draw arrowhead
            context.beginPath();
            context.moveTo(canvas.width / 2 + arrowLength * vector.x, canvas.height / 2 + arrowLength * vector.y);
            context.lineTo(canvas.width / 2 + arrowHead1.x, canvas.height / 2 + arrowHead1.y);
            context.moveTo(canvas.width / 2 + arrowLength * vector.x, canvas.height / 2 + arrowLength * vector.y);
            context.lineTo(canvas.width / 2 + arrowHead2.x, canvas.height / 2 + arrowHead2.y);
            context.lineWidth = 2;
            context.stroke();

            context.fillText(name, canvas.width / 2 + arrowHead2.x * textSpacing, canvas.height / 2 + arrowHead2.y * textSpacing); 
        }

        // Function to draw x and y axes
        function drawAxes(context, canvasWidth, canvasHeight) {
            // Draw x-axis
            context.beginPath();
            context.moveTo(0, canvasHeight / 2);
            context.lineTo(canvasWidth, canvasHeight / 2);
            context.stroke();

            // Draw y-axis
            context.beginPath();
            context.moveTo(canvasWidth / 2, 0);
            context.lineTo(canvasWidth / 2, canvasHeight);
            context.stroke();


            // Draw horizontal grid lines
            for (let y = 0; y &lt; canvasHeight; y += 10) {
                context.beginPath();
                context.moveTo(0, y);
                context.lineTo(canvasWidth, y);
                context.lineWidth = 0.1;
                context.stroke();
            }

            // Draw vertical grid lines
            for (let x = 0; x &lt; canvasWidth; x += 10) {
                context.beginPath();
                context.moveTo(x, 0);
                context.lineTo(x, canvasHeight);
                context.lineWidth = 0.1;
                context.stroke();
            }
        }

        // Get the canvas and its 2d rendering context
        var canvas = document.getElementById(&#39;plotCanvas&#39;);
        var context = canvas.getContext(&#39;2d&#39;);

        // Draw x and y axes
        drawAxes(context, canvas.width, canvas.height, );

        // Generate two random vectors as arrows with modulus 1 starting from the center
        var vector1 = generateUnitVector();
        var vector2 = generateUnitVector();

        // Calculate the sum and sub vector
        var sumVector = addVectors(vector1, vector2);

        // Plot the vectors
        plotVector(context, vector1, &#39;red&#39;, &#34;v1&#34;);
        plotVector(context, vector2, &#39;blue&#39;, &#34;v2&#34;);
        plotVector(context, sumVector, &#39;green&#39;, &#34;s&#34;);

        context.font = &#34;12px Arial&#34;;
        context.fillStyle = &#34;red&#34;;
        context.fillText(&#34;v1 = &#34; + vector1.x*10 + &#34; i &#34; + -vector1.y*10 + &#34; j&#34;, 10, 30); 
        
        context.fillStyle = &#34;blue&#34;;
        context.fillText(&#34;v2 = &#34; + vector2.x*10 + &#34; i &#34; + -vector2.y*10 + &#34; j&#34;, 10, 50); 
        
        context.fillStyle = &#34;green&#34;;
        context.fillText(&#34;s = &#34; + sumVector.x*10 + &#34; i &#34; + -sumVector.y*10 + &#34; j&#34;, 10, 390); 
    &lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;



&lt;/p&gt;
&lt;p&gt;Il grafico in sovraimpressione mostra un piano cartesiano con frecce colorate che rappresentano vettori bidimensionali.
I vettori rossi e blu, rispettivamente $\vec v_1$ e $\vec v_2$, sono delimitati agli estremi dall&amp;rsquo;origine e dai punti $V_1$ e $V_2$.&lt;/p&gt;
&lt;p&gt;$$\vec v_1 = \vec{OV_1}$$
$$\vec v_2 = \vec{OV_2}$$&lt;/p&gt;
&lt;p&gt;Ogni vettore è infatti rappresentato da un modulo (lunghezza), una direzione (la retta su cui poggia) ed un verso.&lt;/p&gt;
&lt;p&gt;È inoltre presente una terza freccia, vettore, di colore viola. Questo vettore $\vec s$ è dato dalla somma dei due precedenti vettori, ovvero:&lt;/p&gt;
&lt;p&gt;$$\vec s = \vec v_1 + \vec v_2$$&lt;/p&gt;
&lt;p&gt;Si può notare come il vettore $\vec s$ sia delimitato dal&amp;rsquo;origine e il punto $S$ identificato dalla somma delle coordinate di $V_1$ e $V_2$.&lt;/p&gt;
&lt;p&gt;$$\vec s = \vec {OS}$$&lt;/p&gt;
&lt;p&gt;Esercitati, ricaricando la pagina, a calcolare le somme tra vari vettori.&lt;/p&gt;
</description>
      
    </item>
    
  </channel>
</rss>
